@echo off
setlocal enabledelayedexpansion

echo ========================================
echo ContaVe Pro - Build de Producci√≥n
echo ========================================
echo.

REM Configurar variables
set "PROJECT_ROOT=%~dp0.."
set "RELEASE_DIR=%PROJECT_ROOT%\release"
set "DOCKER_IMAGE=contave-pro-builder"

echo üìÅ Directorio del proyecto: %PROJECT_ROOT%
echo üìÅ Directorio de release: %RELEASE_DIR%
echo.

REM Limpiar builds anteriores
echo üßπ Limpiando builds anteriores...
if exist "%RELEASE_DIR%" (
    rmdir /s /q "%RELEASE_DIR%"
)
if exist "%PROJECT_ROOT%\dist" (
    rmdir /s /q "%PROJECT_ROOT%\dist"
)

mkdir "%RELEASE_DIR%"
echo ‚úÖ Directorios limpiados

REM Opci√≥n 1: Build local (Windows)
echo.
echo Seleccione m√©todo de build:
echo 1. Build Local (Recomendado para Windows)
echo 2. Build con Docker (Para entornos Linux/CI)
echo.
choice /c 12 /n /m "Seleccione opci√≥n (1 o 2): "

if %errorlevel% equ 1 goto BUILD_LOCAL
if %errorlevel% equ 2 goto BUILD_DOCKER

:BUILD_LOCAL
echo.
echo üèóÔ∏è Iniciando build local...

REM Verificar Node.js
node --version >nul 2>&1
if %errorlevel% neq 0 (
    echo ‚ùå ERROR: Node.js no est√° instalado
    pause
    exit /b 1
)

echo ‚úÖ Node.js verificado

REM Instalar dependencias
echo üì¶ Instalando dependencias...
cd /d "%PROJECT_ROOT%"
call npm ci --omit=optional
if %errorlevel% neq 0 (
    echo ‚ùå ERROR: Fall√≥ la instalaci√≥n de dependencias
    pause
    exit /b 1
)

echo ‚úÖ Dependencias instaladas

REM Build frontend
echo üé® Building frontend...
call npm run build
if %errorlevel% neq 0 (
    echo ‚ùå ERROR: Build de frontend fall√≥
    pause
    exit /b 1
)

echo ‚úÖ Frontend build completado

REM Rebuild native modules
echo üîß Reconstruyendo m√≥dulos nativos...
call npm run rebuild
if %errorlevel% neq 0 (
    echo ‚ö†Ô∏è WARNING: Rebuild fall√≥, continuando...
)

echo ‚úÖ M√≥dulos nativos listos

REM Build Electron binarios
echo ‚ö° Generando binarios Electron...
call npm run dist:win-portable
if %errorlevel% neq 0 (
    echo ‚ùå ERROR: Build de Electron fall√≥
    pause
    exit /b 1
)

echo ‚úÖ Binarios Electron generados

goto BUILD_INNO

:BUILD_DOCKER
echo.
echo üê≥ Iniciando build con Docker...

REM Verificar Docker
docker --version >nul 2>&1
if %errorlevel% neq 0 (
    echo ‚ùå ERROR: Docker no est√° instalado
    pause
    exit /b 1
)

echo ‚úÖ Docker verificado

REM Build Docker image
echo üî® Construyendo imagen Docker...
cd /d "%PROJECT_ROOT%"
docker build -t %DOCKER_IMAGE% .
if %errorlevel% neq 0 (
    echo ‚ùå ERROR: Build de Docker fall√≥
    pause
    exit /b 1
)

echo ‚úÖ Imagen Docker creada

REM Run build in container
echo üöÄ Ejecutando build en contenedor...
docker run --rm -v "%RELEASE_DIR%:/output" %DOCKER_IMAGE%
if %errorlevel% neq 0 (
    echo ‚ùå ERROR: Build en Docker fall√≥
    pause
    exit /b 1
)

echo ‚úÖ Build Docker completado

:BUILD_INNO
echo.
echo üì¶ Generando instalador con Inno Setup...

REM Verificar que existen los binarios
if not exist "%RELEASE_DIR%\win-unpacked" (
    echo ‚ùå ERROR: No se encontraron binarios en release\win-unpacked
    pause
    exit /b 1
)

REM Buscar Inno Setup
set "ISCC_EXE="
set "ISCC_PATH1=C:\Program Files (x86)\Inno Setup 6\iscc.exe"
set "ISCC_PATH2=C:\Program Files\Inno Setup 6\iscc.exe"

if exist "%ISCC_PATH1%" (
    set "ISCC_EXE=%ISCC_PATH1%"
) else if exist "%ISCC_PATH2%" (
    set "ISCC_EXE=%ISCC_PATH2%"
) else (
    echo ‚ùå ERROR: Inno Setup no encontrado
    echo.
    echo SOLUCI√ìN:
    echo 1. Instale Inno Setup desde: https://jrsoftware.org/isinfo.php
    echo 2. O ejecute manualmente: iscc installer.iss
    pause
    exit /b 1
)

echo ‚úÖ Inno Setup encontrado: %ISCC_EXE%

REM Compilar instalador
echo üîß Compilando instalador...
cd /d "%PROJECT_ROOT%"
"%ISCC_EXE%" installer.iss
if %errorlevel% neq 0 (
    echo ‚ùå ERROR: Compilaci√≥n de Inno Setup fall√≥
    pause
    exit /b 1
)

echo.
echo ========================================
echo ‚úÖ BUILD DE PRODUCCI√ìN COMPLETADO!
echo ========================================
echo.

REM Mostrar resultados
if exist "%RELEASE_DIR%\ContaVe-Pro-Setup-2.0.0.exe" (
    echo üì¶ Instalador generado: ContaVe-Pro-Setup-2.0.0.exe
    
    for %%A in ("%RELEASE_DIR%\ContaVe-Pro-Setup-2.0.0.exe") do (
        echo üìä Tama√±o: %%~zA bytes
        echo üìÖ Fecha: %%~tA
    )
    
    echo.
    echo üéØ PASOS SIGUIENTES:
    echo 1. Probar instalador en m√°quina Windows limpia
    echo 2. Verificar que todos los m√≥dulos funcionan
    echo 3. Validar base de datos se crea correctamente
    echo 4. Confirmar desinstalaci√≥n limpia
    echo.
    
    echo ¬øAbrir carpeta release? (S/N)
    choice /c SN /n /m ""
    if !errorlevel! equ 1 (
        start explorer "%RELEASE_DIR%"
    )
) else (
    echo ‚ùå ERROR: No se gener√≥ el instalador
    echo Revise los logs para m√°s detalles
)

echo.
echo üèÅ Proceso completado
pause